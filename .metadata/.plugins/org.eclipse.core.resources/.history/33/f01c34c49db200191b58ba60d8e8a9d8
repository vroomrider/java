package com.java.practice.method;

import com.java.practice.method.model.NewShop;
import com.java.practice.method.model.OldShop;

public class MethodOverriding {

	public static void main(String[] args) throws Exception {

		/**
		 * @MethodOverRiding
		 * @Descritpion1.Constructor chaining will take place with the MethodOverriding
		 *                           i.e., super() will be called which when Subclass
		 *                           object is created - a total of two objects will be
		 *                           internally available
		 * @Descritpion2.Static Methods also will be available in the subclass if not
		 *                      OverRided
		 * @Descritpion3.private members cannot be OverRided
		 * @Descritpion4.Constructors are not OverRided but created[Constructor is not a
		 *                            Member of the class]
		 */
		NewShop shop = new NewShop();
		/**
		 * @specifier PRIVATE
		 * @access cannot access Private.Members
		 */
		// shop.privateBathroom();
		// NewShop.privateStaticBathroom();
		// shop.privateAdditionalBathRoom();
		/**
		 * @specifier DEFAULT
		 * @access 
		 */
		shop.defa
//		shop.doors();
//		shop.stairCase(3);

		OldShop os = new OldShop();
//		os.stairCase((Integer) 6);

	}
}
