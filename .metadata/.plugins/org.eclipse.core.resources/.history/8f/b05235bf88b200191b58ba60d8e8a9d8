package com.java.practice.method.model;

public class OldShop {

	/**
	 ********************************************************************************************************
	 * C.O.N.S.T.R.U.C.T.O.R Methods
	 ********************************************************************************************************
	 */

	/**
	 * PRIVATE @Constructor
	 * 
	 * @Parameterized.Constructor
	 * @param str
	 */
	private OldShop(String str) {
		printInConsole("private.Constructor - " + str);
	}

	/**
	 * DEFAULT @Constructor
	 * 
	 * @Parameterized.Constructor
	 * @param str
	 */
	OldShop(double id) {
		printInConsole("default.Constructor");
		// printInConsole("OldShop defaultConstructor");
	}

	/**
	 * PROTECTED @Constructor
	 * 
	 * @Parameterized.Constructor
	 * @param str
	 */
	protected OldShop(int id) {
		printInConsole("protected.Constructor");
		// printInConsole("OldShop privateConstructor");
	}

	/**
	 * PUBLIC @Constructor
	 */
	public OldShop() {
		printInConsole("public.Constructor");
	}

	public OldShop(Long id) {
		printInConsole("public.Constructor-" + id);
	}

	/**
	 ********************************************************************************************************
	 * PRIVATE Methods
	 ********************************************************************************************************
	 */
	// ****************** S.T.A.T.I.C ***************
	private static void privateStaticBathroom() {
		printInConsole("private.static.Bathroom");
	}

	// ********** N.O.N - S.T.A.T.I.C ***************
	private void privateBathroom() {
		printInConsole("private.Bathroom");
	}

	/**
	 ********************************************************************************************************
	 * DEFAULT Methods
	 ********************************************************************************************************
	 */
	// ****************** S.T.A.T.I.C ***************
	static void defaultStaticHall() {
		printInConsole("default.static.Hall");
	}

	// ********** N.O.N - S.T.A.T.I.C ***************
	void defaultHall() {
		printInConsole("default.Hall()");
	}

	/**
	 ********************************************************************************************************
	 * PROTECTED Methods
	 ********************************************************************************************************
	 */
	// ****************** S.T.A.T.I.C ***************
	protected static void protectedStaticReception() {
		printInConsole("proptected.static.Bathroom");
	}

	// ********** N.O.N - S.T.A.T.I.C ***************
	protected void protectedReception() {
		printInConsole("proptected.Bathroom");
	}

	/**
	 ********************************************************************************************************
	 * PUBLIC Methods
	 ********************************************************************************************************
	 */
	// ********** N.O.N - S.T.A.T.I.C ***************
	public void publicStairCase() {
		printInConsole("public.stairCase");
		// defaultBathroom();
	}

	/**
	 * @NonStatic.Method
	 * @param String
	 *            input
	 * @return String value
	 */
	public void publicStairCase(boolean primitive_boolean) {
		printInConsole("public.stairCase(boolean)." + primitive_boolean);
	}

	public void publicStairCase(byte primitive_byte) {
		printInConsole("public.stairCase(byte)." + primitive_byte);
	}
	
	public void publicStairCase(char primitive_char) {
		printInConsole("public.stairCase(char)." + primitive_char);
	}

	/**
	 * @NonStatic.Method
	 * @param Integer
	 *            input
	 * @return
	 */
	public void publicStairCase(int primitive_int) {
		printInConsole("public.stairCase(int)." + primitive_int);
	}

	/**
	 * @NonStatic.Method
	 * @param Long
	 *            input
	 * @return String value
	 */
	public String stairCase(Long data) {
		printInConsole("String OverLoaded");
		return "";
	}

	/**
	 * @NonStatic.Method
	 * @param Integer
	 *            input
	 * @return Long value
	 * @throws Exception
	 */
	public Long stairCase(Integer data) throws Exception {
		printInConsole("String Integer OverLoaded");
		return 0L;
	}

	/**
	 * @NonStatic.Method
	 * @param int
	 *            input
	 * @return Long value
	 * @throws Exception
	 */
	public Long stairCase(int data) throws Exception {
		printInConsole("String int OverLoaded");
		return 0L;
	}

	/**
	 * @NonStatic.Method
	 * @return
	 * @throws Exception
	 */
	public void noStairCase() throws Exception {
		printInConsole("noStairCase()");
	}

	/**
	 * @NonStatic.Method
	 * @return
	 * @param String
	 *            input
	 */
	public void noStairCase(String reason) {
		printInConsole("noStairCase(str) - MethodOverLoading");
	}

	/**
	 * @NonStatic.Method
	 * @return
	 */
	public void doors() {
		printInConsole("doors()");
	}

	// ****************** S.T.A.T.I.C ***************

	public static void items() {
		printInConsole("items()");
	}

	/**
	 * @Printing.Logs.In.Console
	 * @param str
	 */
	public static void printInConsole(String str) {
		System.out.println("OldShop - " + str);
	}
}
